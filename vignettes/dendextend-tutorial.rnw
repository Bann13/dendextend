<<eval=FALSE, echo=FALSE>>=
toBibtex(citation("labeltodendro"))
toBibtex(citation("DendSer"))
toBibtex(citation("dendroextras"))
toBibtex(citation("ggdendro"))
toBibtex(citation("ape"))
toBibtex(citation("Rcpp"))
toBibtex(citation())
@

%% need no \usepackage{Sweave.sty}

<<prelim,echo=FALSE>>=
suppressPackageStartupMessages(library(dendextend))
dendextend.version <- packageDescription("dendextend")$Version
dendextend.date <- packageDescription("dendextend")$Date
now.date <- strftime(Sys.Date(), "%B %d, %Y")
options(width = 60)
@
%





%% use JSS class -- use 'nojss' to turn off header
\documentclass[shortnames,nojss,article]{jss}
\usepackage{booktabs,flafter,thumbpdf}
%\VignetteIndexEntry{An Introduction to dendextend}
%\VignetteKeywords{Dendrogram, hclust, heirarchical clustering, visualization, tanglegram, R}
%\VignettePackage{dendextend}
%\VignetteEngine{knitr::knitr}


\author{Tal Galili\\Tel-Aviv University \And Yoav Benjamini\\Tel-Aviv University}
\Plainauthor{Tal Galili, Yoav Benjamini}

\Plaintitle{dendextend: doing more with dendrogram objects in R}
\title{\pkg{dendextend}: doing more with\\ dendrogram objects in R}

\Abstract{
  The \pkg{dendextend} package extends the dendrogram objects in \proglang{R}.
}

\Keywords{Dendrogram, hclust, heirarchical clustering, visualization, tanglegram,  \proglang{R}}
\Plainkeywords{Dendrogram, hclust, heirarchical clustering, visualization, tanglegram, R}


% \Volume{40}
% \Issue{8}
% \Month{April}
% \Year{2011}
% \Submitdate{2010-11-15}
% \Acceptdate{2011-03-21}

\Address{
  Tal Galili \\
   Department of Statistics and Operations Research \\
   Tel Aviv University, Israel \\
   E-mail: \email{tal.galili@math.tau.ac.il}\\
   URLs: \url{http://www.r-statistics.com/}, 
         \url{http://www.r-bloggers.com/}\\

  Yoav Benjamini\\
   The Nathan and Lily Silver\\
   Professor of Applied Statistics\\
   Department of Statistics and Operations Research \\
   Tel Aviv University, Israel \\
   E-mail: \email{ybenja@tau.ac.il}\\
   URL: \url{http://www.tau.ac.il/~ybenja/}
}



\begin{document}

\vspace*{-0.25cm}

\section{Introduction}

\subsection{Introduction}


The \code{dendrogram} class provides general functions for handling tree-like structures in \proglang{R} \citep{R:Main}. It is intended as a replacement for similar functions in hierarchical clustering and classification/regression trees, such that all of these can use the same engine for plotting or cutting trees.

A dendrogram object represents a tree as a list object, with various attributes.

For example, let's create a dendrogram object based on an heirarchical clustering of 4 states in the U.S.:

<<>>=
# our data:
data(USArrests)
US_data <- USArrests[c(2,5,32,35),]
print(US_data)

hc <- hclust(dist(US_data), "ave") # create an heirarchical clustering object
dend <- as.dendrogram(hc)
@



Dendrogram has several useful methods bundled with R:

<<>>=
methods(class="dendrogram")
@


Here are some examples for their use:

<<out.width="4in", out.height="4in",fig.align='center'>>=
print(dend)
labels(dend)
str(dend)
str(dend[[2]]) # looking at one branch of the dendrogram
plot(dend)
@

You might notice how the order of the items (leaves/terminal nodes) of the dendrogram is different than their order in the table. In order to re-order the rows in the data-table to have the same order as the items in the dendrogram, we can use the \code{order.dendrogram} function:

<<>>=
(new_order <- order.dendrogram(dend)) 
# the order of the original items to have them 
# be at the same order as they assume in the dendrogram
print(US_data[new_order,])
@


In order to see what our dendrogram (list) object includes, we need to use the \code{unclass} function, which will allow us to print the list as is, without going through the \code{print.dendrorgam} method:

<<>>=
unclass(dend)
@



We can see how each node in the dendrogram/list object has the following (self explaining) attributes:
Also, terminal nodes also has the "leaf" attribute (set to TRUE).
<<>>=
names(attributes(dend)[-4])
@
Also, terminal nodes also has the "leaf" attribute (set to TRUE).

\subsection{Motivation for creating \code{dendextend}}



The \code{dendrogram} object has several \textbf{advantages}:

\begin{enumerate}
   \item \code{dendrogram} objects are simply list R objects. This makes their structure  very simple to understand by R users.
   \item \code{dendrogram} objects has various methods and functions for using them in R. 
   \item \code{dendrogram} objects are relatively simple to manipulte and extend.
   \item Other tree objects (such as *hclust*, and objects from the *{ape}* package) include an *as.dendrogram* method for converting their objects into a dendrogram.
\end{enumerate}


However, even with all of its advantages, the \code{dendrogram} class in R still lacks various basic features.

The \code{dendextend} package aims at filling some gaps in base R, by extending the available functions for dendrogram manipulation, statistical analysis, and visualization.

This vignettes Provides a step-by-step description of the functionality provided by the \code{dendextend} package.


\subsection{Installing \code{dendextend}}

To install the stable version from CRAN use:

<<eval=FALSE>>=
install.packages('dendextend') # not yet available from CRAN
@


To install the \href{https://github.com/talgalili/dendextend}{GitHub version} use:

<<eval=FALSE>>=
if (!require('devtools')) install.packages('devtools'); require('devtools')
install_github('dendextend', 'talgalili')
@


\section{Labels extraction and assignment}


\subsection{labels in base R}

In base R, the \code{labels} function is intended to find/extract a suitable set of labels from an object for use in printing or plotting, for example. By default, it uses the \code{names} and \code{dimnames} functions.

What base R \code{labels} function is mising is assignment. In the next few examples we will go through different examples of what the \code{dendextend} package offers for various objects.

\textbf{Credit:} These assignment functions were originally written by Gavin Simpson (in a post on \href{http://stackoverflow.com/questions/4614223/how-to-have-the-following-work-labelsx-some-value-r-question}{(stackoverflow)}), and adopted/adjusted to this package by Tal Galili.


\subsection{labels for vectors and matrixes}

In base R, for vectors, labels gives the \code{names} of the object. And if these are missing, then \code{labels} will give the vector itself as a character vector:

<<>>=
x <- 1:3 
names(x) # this vector has no names
labels(x) # this vector has no labels
@

Assignment to names is available in base R and works as follows:

<<>>=
x <- 1:3 
names(x) <- letters[1:3] # assignment for names is in base R
#both names and labels will give the same result:
names(x) 
labels(x)

@


The new labels assignment function will allow a user to change the labels of the vector just as if it was "names":

<<>>=
x <- 1:3 
labels(x) <- letters[1:3]
names(x) 
labels(x)
@

Labels assignment are also available for matrixes.


\subsection{labels for dendrogram objects}

\subsection{labels for hclust objects}




% 
% 
% a short review of other approaches and give some historical
% background on the development of \pkg{dendextend}.
% 
% 
% Several examples are included to illustrate the functionality of \pkg{dendextend}. Many more examples are available within
% the package. % , both as explicit examples and as part of the numerous unit tests.
% %
% The \pkg{dendextend} package is available from the Comprehensive \proglang{R} Archive Network (CRAN)
% at \url{http://CRAN.R-project.org/package=dendextend}.
% 
% \makeatletter
% \if@nojss
%   This vignette will one day corresponds to a paper 
%   
% %   published in the \textsl{Journal of Statistical Software}. It is currently still identical to the published paper.  
%   
%   Over time, this vignette version may receive minor
%   updates. For citations, please use %the \cite{JSS:dendextend} or
%   % \cite{Eddelbuettel:2013:dendextend}; details are also provided in
%   \proglang{R} via \texttt{citation("dendextend")}.
% 
%   This version corresponds to \pkg{dendextend} version \Sexpr{dendextend.version} and was typeset on \Sexpr{now.date}.
% \fi
% \makeatother
% 

% \subsection{Historical context}
% \subsection{Related work}

%%% \cite - name and date in (),, \citep - (all in ())
% \cite{TempleLang:2009:RGCCTranslationUnit}, 

% \subsection[dendextend use cases]{\pkg{dendextend} use cases}
% \label{sec:classic_dendextend}

% \subsection[dendextend class hierarchy]{\pkg{dendextend} class hierarchy}
% \subsection{Derived classes}

% \subsection{Character vectors}

% \section[R and C++ data interchange]{\proglang{R} and \proglang{C++} data interchange}

% \subsection[C++ to R: wrap]{\proglang{C++} to \proglang{R}: \code{wrap}}
% \subsection[R to C++: as]{\proglang{R} to \proglang{C++}: \code{as}}

% The \citep command is used where the author name is to appear inside the parentheses alongside the date.
% \citep{Sanderson:2010:Armadillo}.


% \subsection{Implicit use of converters}

% \section{Function calls}
% \label{sec:functions}

% \section{Using code `inline'}
% \label{sec:inline}
% \code{update.packages()} 
% \footnote{This presumes a platform for which pre-built binaries are}
% \cite{CRAN:dendextend:Attributes} for more details.

% \section{Using Standard Template Library algorithms}

% \citep{Plauger+Et+Al:2000:STL}. 


% \section{Error handling}
% \subsection[C++ exceptions in R]{\proglang{C++} exceptions in \proglang{R}}
% \subsection[R errors in C++]{\proglang{R} errors in \proglang{C++}}


% \section{Performance comparison}
% \label{sec:perfcomp}



% %
% \begin{Code}
% ...
% \end{Code}
% %

% are summarized in Table~\ref{tab:benchmark} below.
% 
% \begin{table}[t]
%   \begin{center}
%     \begin{small}
%       \begin{tabular}{lrr}
%         \toprule
%         Implementation                    & Time in millisec. & Relative to \proglang{R} API \\
%         \cmidrule(r){2-3}
%         \proglang{R} API (as benchmark)             &  218       & \\
%         \pkg{dendextend} sugar                        &  145       & 0.67 \\
%         \code{NumericVector::iterator}    &  217       & 1.00 \\
%         \code{NumericVector::operator[]}  &  282       & 1.29 \\
%         %\code{dendextendVector<double>}         &  683       & 3.13 \\
%         \bottomrule
%       \end{tabular}
%     \end{small}
%     \caption{Run-time performance of the different convolution examples.}
%     \label{tab:benchmark}
%   \end{center}
% \end{table}
% 

% \section{On-going development}
% \label{sec:ongoing}

% \code{head},


\section{Summary}

The \pkg{dendextend} package presented in this paper greatly extends the available functionality of the dendrogram objects in \proglang{R}.

% compiled \proglang{C++} code with \proglang{R}.
% \pkg{dendextend} provides a \proglang{C++} class hierarchy which allows manipulation of \proglang{R} data structures in \proglang{C++}
% using member functions and operators directly related to the type
% of object being used, thereby reducing the level of expertise
% required to master the various functions and macros offered by the
% internal \proglang{R} API. The classes assume the entire
% responsibility of garbage collection of objects, relieving the
% programmer from book-keeping operations with the protection stack
% and enabling him/her to focus on the underlying problem.
% 
% Data interchange between \proglang{R} and \proglang{C++} code is performed by the \code{wrap()} and
% \code{as()} template functions. They allow the programmer to write logic in terms
% of \proglang{C++} data structures, and facilitate use of modern libraries such as the
% Standard Template Library (STL) and its containers and algorithms. The
% \code{wrap()} and \code{as()} template functions are extensible by
% design. They are also used either explicitly or implicitly throughout the API.
% By using only thin wrappers around \code{SEXP} objects and adopting \proglang{C++}
% idioms such as iterators, the footprint of the \pkg{dendextend} API
% is very lightweight, and does not incur a significant performance penalty.
% 
% The \pkg{dendextend} API offers opportunities to dramatically reduce the complexity
% of code, which should lower the initial cost of writing code and improve code readability, maintainability, and
% reuse---without incurring noticeable penalties in run-time performance.



% \section*{Acknowledgments}
% 
% Detailed comments and suggestions by editors as well as anonymous referees
% are gratefully acknowledged.  We are also thankful for code contributions by
% Douglas Bates and John Chambers, as well as for very helpful suggestions by Uwe
% Ligges, Brian Ripley and Simon Urbanek concerning the build systems for different
% platforms.   Last but not least, several users provided very fruitful
% ideas for new or extended features via the \code{dendextend-devel} mailing list.


\bibliography{dendextend-tutorial}

\vspace*{-0.35cm}

\end{document}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:


%% library(knitr)
%% Sweave2knitr('vignettes\\dendextend-tutorial.rnw')
